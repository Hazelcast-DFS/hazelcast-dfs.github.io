{
    "docs": [
        {
            "location": "/", 
            "text": "Hazelcast - Distributed-Filesystem\n\n\nThis is based on the \nHEP - HZDFS\n\n\nSummary\n\n\nHZDFS the Hazelcast Distributed Filesystem Layer is a filesystem with simple access rights management and the possibility to store files larger than 2GB (chunked) in Hazelcast.\n\n\nGoals\n\n\n\n\nChunking of big files\n\n\nAccess rights management\n\n\nDirectory Service\n\n\nUser management\n\n\nStreaming support (micro batching?)\n\n\n\n\nNavigating directory trees and files\n\n\n\n\n\n\nSupport for files larger than 2GB\n\n\n\n\nJava 7 Path API support?\n\n\nJava Input-/OutputStream API?\n\n\nJava 7 (Async-)ByteChannel API?\n\n\n\n\nNon-Goals\n\n\nThe implementation is not supposed to be fully POSIX compatible\nNo operating system adapters are part of this HEP\n\n\nMotivation\n\n\nIt will allow to use memory-consumption based eviction policy in case when in-memory-format is OBJECT\n\n\nSuccess Metrics\n\n\nTypical CRUD operations on files and directories are available, as well as necessary mechanisms are in place to store files bigger than 2GB (chunking) and path walking / searching is possible. Files also need to support reading in a streaming fashion.\n\n\nDescription\n\n\nHZDFS the Hazelcast Distributed Filesystem Layer is supposed to build a filesystem with access rights management. Files will be stored in chunks and distributed evenly over all nodes with a directory service and lookup system being part of the clustering system.\nTesting\nTypical amount of unit tests as well as integration testing and long running tests utilizing internal eviction strategies and underlying external resources.", 
            "title": "Home"
        }, 
        {
            "location": "/#hazelcast-distributed-filesystem", 
            "text": "This is based on the  HEP - HZDFS", 
            "title": "Hazelcast - Distributed-Filesystem"
        }, 
        {
            "location": "/#summary", 
            "text": "HZDFS the Hazelcast Distributed Filesystem Layer is a filesystem with simple access rights management and the possibility to store files larger than 2GB (chunked) in Hazelcast.", 
            "title": "Summary"
        }, 
        {
            "location": "/#goals", 
            "text": "Chunking of big files  Access rights management  Directory Service  User management  Streaming support (micro batching?)   Navigating directory trees and files    Support for files larger than 2GB   Java 7 Path API support?  Java Input-/OutputStream API?  Java 7 (Async-)ByteChannel API?", 
            "title": "Goals"
        }, 
        {
            "location": "/#non-goals", 
            "text": "The implementation is not supposed to be fully POSIX compatible\nNo operating system adapters are part of this HEP", 
            "title": "Non-Goals"
        }, 
        {
            "location": "/#motivation", 
            "text": "It will allow to use memory-consumption based eviction policy in case when in-memory-format is OBJECT", 
            "title": "Motivation"
        }, 
        {
            "location": "/#success-metrics", 
            "text": "Typical CRUD operations on files and directories are available, as well as necessary mechanisms are in place to store files bigger than 2GB (chunking) and path walking / searching is possible. Files also need to support reading in a streaming fashion.", 
            "title": "Success Metrics"
        }, 
        {
            "location": "/#description", 
            "text": "HZDFS the Hazelcast Distributed Filesystem Layer is supposed to build a filesystem with access rights management. Files will be stored in chunks and distributed evenly over all nodes with a directory service and lookup system being part of the clustering system.\nTesting\nTypical amount of unit tests as well as integration testing and long running tests utilizing internal eviction strategies and underlying external resources.", 
            "title": "Description"
        }
    ]
}